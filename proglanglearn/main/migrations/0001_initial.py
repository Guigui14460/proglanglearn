# Generated by Django 2.2.6 on 2019-11-02 17:28

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='adresse IP')),
                ('natural_language', models.CharField(max_length=5, verbose_name="langage naturel de l'utilisateur")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(verbose_name="identifiant de l'objet")),
                ('content', models.TextField(verbose_name='commentaire ou réponse')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='date de publication')),
                ('reported', models.BooleanField(default=False, verbose_name='reporté')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL, verbose_name='auteur')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name="modèle de l'objet")),
            ],
            options={
                'verbose_name': 'commentaire',
                'verbose_name_plural': 'commentaires',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='EmailAdminNotificationForUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=100, verbose_name='sujet')),
                ('subject_fr', models.CharField(max_length=100, null=True, verbose_name='sujet')),
                ('subject_en', models.CharField(max_length=100, null=True, verbose_name='sujet')),
                ('body', models.TextField(verbose_name='corps')),
                ('body_fr', models.TextField(null=True, verbose_name='corps')),
                ('body_en', models.TextField(null=True, verbose_name='corps')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name="date d'envoi")),
                ('to_send', models.BooleanField(default=False, verbose_name='à envoyer')),
                ('is_sent', models.BooleanField(default=False, verbose_name='envoyé')),
            ],
            options={
                'verbose_name': "notification par email de l'administration",
                'verbose_name_plural': "notifications par email de l'administration",
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='nom du langage de programmation/bibliothèque')),
                ('name_fr', models.CharField(max_length=30, null=True, unique=True, verbose_name='nom du langage de programmation/bibliothèque')),
                ('name_en', models.CharField(max_length=30, null=True, unique=True, verbose_name='nom du langage de programmation/bibliothèque')),
                ('slug', models.SlugField(blank=True, null=True, verbose_name="URL d'accès")),
                ('image', models.ImageField(blank=True, null=True, upload_to='languages_tags/', verbose_name='logo')),
                ('content', tinymce.models.HTMLField(blank=True, null=True, verbose_name='description du langage')),
                ('content_fr', tinymce.models.HTMLField(blank=True, null=True, verbose_name='description du langage')),
                ('content_en', tinymce.models.HTMLField(blank=True, null=True, verbose_name='description du langage')),
            ],
            options={
                'verbose_name': 'langage de programmation ou bibliothèque',
                'verbose_name_plural': 'langages de programmation ou bibliothèques',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='nom de la catégorie')),
                ('name_fr', models.CharField(max_length=30, null=True, unique=True, verbose_name='nom de la catégorie')),
                ('name_en', models.CharField(max_length=30, null=True, unique=True, verbose_name='nom de la catégorie')),
                ('slug', models.SlugField(blank=True, null=True, verbose_name="URL d'accès")),
                ('image', models.ImageField(blank=True, null=True, upload_to='languages_tags/', verbose_name='illustration')),
                ('content', tinymce.models.HTMLField(blank=True, null=True, verbose_name='description de la catégorie')),
                ('content_fr', tinymce.models.HTMLField(blank=True, null=True, verbose_name='description de la catégorie')),
                ('content_en', tinymce.models.HTMLField(blank=True, null=True, verbose_name='description de la catégorie')),
            ],
            options={
                'verbose_name': 'catégorie',
                'verbose_name_plural': 'catégories',
            },
        ),
        migrations.CreateModel(
            name='CommentReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_alert', models.CharField(choices=[('A', 'Harcèlement'), ('B', 'Discriminations physiques, racistes, sexistes'), ('C', 'Incitations ou apologie du terrorisme'), ('D', 'Incitations à la violence et à la haine'), ('E', 'Autre (explications demandées)')], max_length=1, verbose_name='type de signalement')),
                ('content_alert', models.TextField(blank=True, null=True, verbose_name='contenu du signalement')),
                ('verified', models.BooleanField(default=False, verbose_name='vérifié')),
                ('to_strike', models.BooleanField(default=False, verbose_name='à striker')),
                ('striked', models.BooleanField(default=False, verbose_name='striké')),
                ('alerter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='signaleur')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='main.Comment', verbose_name='commentaire reporté')),
            ],
            options={
                'verbose_name': 'signalement de commentaire',
                'verbose_name_plural': 'signalements de commentaire',
            },
        ),
    ]
